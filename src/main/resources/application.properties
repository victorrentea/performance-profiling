spring.application.name=profiling

#logging.pattern.level=%5p %X{keyInMDC}

logging.level.victor=DEBUG
logging.level.p6spy=DEBUG

my.executor.core-pool-size=200
my.executor.max-pool-size=${my.executor.core-pool-size}
my.executor.queue-capacity=500
my.executor.thread-name-prefix=my-

#### DB Setup
#spring.datasource.url = jdbc:h2:tcp://localhost:9092/~/test
## Connect to DB via proxy delaying traffic:
spring.datasource.url = jdbc:h2:tcp://localhost:19092/~/test
spring.datasource.driver-class-name=org.h2.Driver
#spring.datasource.url = jdbc:p6spy:h2:tcp://localhost:19092/~/test
#spring.datasource.driver-class-name=com.p6spy.engine.spy.P6SpyDriver
spring.datasource.username=sa
spring.datasource.password=sa

spring.cloud.openfeign.client.config.loan-comments.url=http://localhost:9999

# tell Hibernate to create the tables
spring.jpa.hibernate.ddl-auto=create

# works perfectly at the beggining. will keep working is boz haz muney.
#spring.datasource.hikari.maximum-pool-size=30

#this
management.endpoint.prometheus.enabled=true

# expose metrics this too
management.endpoints.web.exposure.include=*

# next: secure this endpoint using basic authentication to allow only the monitoring tool to access it in prod

# expose tomcat metrics
server.tomcat.mbeanregistry.enabled=true

# send multiple INSERTs at once as a batch to optimize initial data insert
spring.jpa.properties.hibernate.jdbc.batch_size = 100

# JDBC Connection Pool size
#spring.datasource.hikari.maximum-pool-size=25

# Acquiring the DB connection only at the first DB access, not when entering a @Transactional method: https://vladmihalcea.com/why-you-should-always-use-hibernate-connection-provider_disables_autocommit-for-resource-local-jpa-transactions/
#spring.jpa.properties.hibernate.connection.provider_disables_autocommit=true

# By default, Spring releases the JDBC Connection from the thread, only after the HTTP response is sent back (to allow lazy-loading while marshalling JSON)
#spring.jpa.open-in-view=false